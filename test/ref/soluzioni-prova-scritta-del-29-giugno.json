{
    "post": {
        "title": "soluzioni prova scritta del 29 Giugno",
        "date": "2015-06-30T17:01:55.000Z",
        "layout": "post",
        "category": "infob",
        "tags": [
            "esame"
        ],
        "formattedDate": "Tuesday, June 30th 2015",
        "smallDate": "6/30",
        "smallDescription": "",
        "dirName": "infob/2015/06/30",
        "fileName": "soluzioni-prova-scritta-del-29-giugno",
        "htmlContent": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head lang=\"en\">\n    <title>soluzioni prova scritta del 29 Giugno</title>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n    <meta name=\"description\" content=\"\">\n    <meta name=\"keywords\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no,minimal-ui\">\n    <script type=\"text/javascript\" src=\"/js/client.js\"></script>\n  </head>\n  <body ng-app=\"application\">\n    <div class=\"site_wrapper\">\n      <div class=\"sidebar\"> <img class=\"sidebar__picture\">\n        <div class=\"sidebar__name\">Vittorio Zaccaria</div>\n        <div class=\"sidebar__address\">Politecnico di Milano</div>\n        <ul class=\"sidebar__link_list\">\n          <li onclick=\"location.href=&apos;/&apos;\" style=\"cursor: pointer\" class=\"sidebar__link_item\"><span class=\"sidebar__link_item__icon fa-stack\"><i class=\"fa fa-stack-2x fa-circle\"></i><i class=\"sidebar__link_item__icon__inner fa fa-stack-1x fa-inverse fa-home\"></i></span>\n            <div class=\"sidebar__link_item__name\">Home</div>\n          </li>\n          <li onclick=\"location.href=&apos;/research.html&apos;\" style=\"cursor: pointer\" class=\"sidebar__link_item\"><span class=\"sidebar__link_item__icon fa-stack\"><i class=\"fa fa-stack-2x fa-circle\"></i><i class=\"sidebar__link_item__icon__inner fa fa-stack-1x fa-inverse fa-flask\"></i></span>\n            <div class=\"sidebar__link_item__name\">Research</div>\n          </li>\n          <li onclick=\"location.href=&apos;/blog.html&apos;\" style=\"cursor: pointer\" class=\"sidebar__link_item\"><span class=\"sidebar__link_item__icon fa-stack\"><i class=\"fa fa-stack-2x fa-circle\"></i><i class=\"sidebar__link_item__icon__inner fa fa-stack-1x fa-inverse fa-quote-left\"></i></span>\n            <div class=\"sidebar__link_item__name\">Blog</div>\n          </li>\n          <li onclick=\"location.href=&apos;/projects.html&apos;\" style=\"cursor: pointer\" class=\"sidebar__link_item\"><span class=\"sidebar__link_item__icon fa-stack\"><i class=\"fa fa-stack-2x fa-circle\"></i><i class=\"sidebar__link_item__icon__inner fa fa-stack-1x fa-inverse fa-floppy-o\"></i></span>\n            <div class=\"sidebar__link_item__name\">Projects</div>\n          </li>\n          <li onclick=\"location.href=&apos;/teaching.html&apos;\" style=\"cursor: pointer\" class=\"sidebar__link_item\"><span class=\"sidebar__link_item__icon fa-stack\"><i class=\"fa fa-stack-2x fa-circle\"></i><i class=\"sidebar__link_item__icon__inner fa fa-stack-1x fa-inverse fa-graduation-cap\"></i></span>\n            <div class=\"sidebar__link_item__name\">Teaching</div>\n          </li>\n          <li onclick=\"location.href=&apos;/deposit/cv.pdf&apos;\" style=\"cursor: pointer\" class=\"sidebar__link_item\"><span class=\"sidebar__link_item__icon fa-stack\"><i class=\"fa fa-stack-2x fa-circle\"></i><i class=\"sidebar__link_item__icon__inner fa fa-stack-1x fa-inverse fa-user\"></i></span>\n            <div class=\"sidebar__link_item__name\">CV</div>\n          </li>\n          <li onclick=\"location.href=&apos;/videos.html&apos;\" style=\"cursor: pointer\" class=\"sidebar__link_item\"><span class=\"sidebar__link_item__icon fa-stack\"><i class=\"fa fa-stack-2x fa-circle\"></i><i class=\"sidebar__link_item__icon__inner fa fa-stack-1x fa-inverse fa-youtube-play\"></i></span>\n            <div class=\"sidebar__link_item__name\">Videos</div>\n          </li>\n          <li onclick=\"location.href=&apos;/address.html&apos;\" style=\"cursor: pointer\" class=\"sidebar__link_item\"><span class=\"sidebar__link_item__icon fa-stack\"><i class=\"fa fa-stack-2x fa-circle\"></i><i class=\"sidebar__link_item__icon__inner fa fa-stack-1x fa-inverse fa-map-marker\"></i></span>\n            <div class=\"sidebar__link_item__name\">Address</div>\n          </li>\n        </ul>\n        <div class=\"sidebar__bottom\"> \n          <div onclick=\"location.href=&apos;http://www.linkedin.com/in/vzaccaria&apos;\" style=\"cursor: pointer\" class=\"sidebar__bottom__button\"><i class=\"fa fa-linkedin-square\"></i></div>\n          <div onclick=\"location.href=&apos;http://twitter.com/_vzaccaria_&apos;\" style=\"cursor: pointer\" class=\"sidebar__bottom__button\"><i class=\"fa fa-twitter-square\"></i></div>\n          <div onclick=\"location.href=&apos;https://plus.google.com/116322227495215922957/about&apos;\" style=\"cursor: pointer\" class=\"sidebar__bottom__button\"><i class=\"fa fa-google-plus-square\"></i></div>\n        </div>\n      </div>\n      <div class=\"site_container\">\n        <div class=\"post_container\">\n          <div class=\"post_container__post__title\">soluzioni prova scritta del 29 Giugno</div>\n          <div class=\"post_container__post__subtitle\"> \n            <div class=\"post_container__post__date\"> <i class=\"fa fa-calendar-o\"> </i>\n              <div class=\"post_container__post__date_value\">Tuesday, June 30th 2015</div>\n            </div>\n            <div class=\"post_container__post__category\"> <i class=\"fa fa-flag-o\"> </i>\n              <div class=\"post_container__post__category_value\">infob</div>\n            </div>\n            <div class=\"post_container__post__tags\"> <i class=\"fa fa-tags\"></i>\n              <div class=\"post_container__post__tag\">esame</div>\n            </div>\n            <div class=\"share_buttons\"> \n              <div class=\"share_buttons__message\">Share: </div>\n              <div style=\"cursor: pointer\" class=\"share_buttons__share_reddit\"><i class=\"fa fa-reddit\"> </i></div>\n              <div style=\"cursor: pointer\" class=\"share_buttons__share_twitter\"><i class=\"fa fa-twitter\"></i></div>\n            </div>\n          </div>\n          <div class=\"post_text\"><h1 id=\"esercizio-numero-1-linguaggio-c\">Esercizio numero 1 - Linguaggio C</h1>\n<p>Si considerino i seguenti tipi di dato in C. Essi servono a contenere le\ninformazioni relative ad una carta di credito, incluse le transazioni\neseguite.</p>\n<pre><code class=\"lang-c\">#define N 100\ntypedef char Stringa[N];\ntypedef enum {falso, vero} bool;\n\ntypedef struct // descrizione della transazione\n{\n    float importo;\n    Stringa nazione;\n    int timestamp; // tempo dell&#39;acquisto espresso in secondi dal 1/1/1970.\n    // Ad es. le ore 9:00:00 del il 2015.06.29 corrispondono al 1435561200 secondo\n    //        le ore 9:01:00 del il 2015.06.29 corrispondono al 1435561260 secondo\n    bool usato_pin; // determina se la transazione è avvenuta richiedendo il pin all&#39;utente\n} Acquisto;\n\ntypedef struct\n{\n    int card_number; // numero della carta\n    Acquisto trans[N];\n    int n_trans; // numero delle transazioni eseguite\n} Carta;\n</code></pre>\n<h2 id=\"domanda-1\">Domanda 1</h2>\n<p>Si definisca un nuovo tipo di struttura <code>Persona</code> atta a contenere le\ninformazioni relative al proprietario della carta e si modifichi la\ndefinizione del tipo <code>Carta</code> in modo che contenga un campo\n<code>proprietario</code> di tipo <code>Persona</code>.</p>\n<pre><code class=\"lang-c\">typedef struct\n{\n    Stringa nome;\n    Stringa cognome;\n} Persona;\n\ntypedef struct\n{\n    int card_number;      // numero della carta\n    Acquisto trans[N];    // acquisti effettuati con la carta\n    Persona proprietario; // \n    int n_trans;          // numero delle transazioni eseguite\n} Carta;\n</code></pre>\n<h2 id=\"domanda-2\">Domanda 2</h2>\n<p>Si scriva un frammento di codice in linguaggio C per rilevare le carte\nche possono aver subito una frode. Una carta può aver subito una frode\nse:</p>\n<p>a.  riporta due transazioni consecutive in meno di 1 minuto, oppure\nb.  riporta due transazioni consecutive con PIN in nazioni diverse in meno di\n    un&#39;ora.</p>\n<p>In particolare:</p>\n<ol>\n<li><p>Il codice deve contenere una variabile <code>cards</code> che memorizzi 1\nmilione di carte di credito</p>\n</li>\n<li><p>Assumendo che la variabile <code>cards</code> sia stata riempita\nprecedentemente:</p>\n<ul>\n<li><p>si stampino i numeri delle carte che possono aver subito una\nfrode. Si tenga presente che le transazioni registrate in\n<code>Acquisto trans[N]</code> sono ordinate cronologicamente.</p>\n</li>\n<li><p>si copino le informazioni di tutte le persone frodate nell&#39;array\n<code>persone_frodate</code> (senza lasciare buchi)</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><!-- --></p>\n<pre><code class=\"lang-c\">#define M 1000000\nint main()\n{\n    Carta cards[M];\n    int i, j, k, frodata;\n    Persona persone_frodate[M];\n    for(i = 0; i &lt; M; i++) {\n        frodata = 0; \n        k = 0;\n        for(j = 0; (j &lt; cards[i].n_trans - 1) &amp;&amp; frodata == 0; j++) {\n            if(cards[i].trans[j+1].timestamp - cards[i].trans[j].timestamp &lt; 60) {\n                frodata = 1;\n            }\n            else {\n                if(cards[i].trans[j+1].usato_pin == vero &amp;&amp; \n                   cards[i].trans[j].usato_pin == vero &amp;&amp;\n                   cards[i].trans[j+1].timestamp - cards[i].trans[j].timestamp &lt; 60 * 60 &amp;&amp;\n                   strcmp(cards[i].trans[j+1].nazione, cards[i].trans[j].nazione) != 0) {\n                    frodata = 1;\n                }\n            }\n        }\n        if (frodata) {\n            printf(&quot;\\nla carta %d è stata frodata &quot;, cards[i].card_number);\n            persone_frodate[k] = cards[i].proprietario;\n            k++;\n        }\n    }\n}\n</code></pre>\n<p>\\newpage</p>\n<h1 id=\"esercizio-numero-2-matlab\">Esercizio numero 2 - Matlab</h1>\n<p>Si sviluppino in Matlab le seguenti funzioni:</p>\n<h2 id=\"funzione-n-1\">Funzione n. 1</h2>\n<p>Si definisca la funzione <code>rimuovi(A,v)</code> tale che, dato un vettore <code>A</code> ed\nun valore <code>v</code> in ingresso, ritorni il vettore <code>A</code> privato di <code>v</code> (se\ncontenuto in esso), altrimenti restituisce <code>A</code>.</p>\n<ul>\n<li><code>rimuovi([ 5, 6, 7 ], 5)</code> ritorna <code>[6, 7]</code></li>\n<li><code>rimuovi([ 5, 6, 7 ], 9)</code> ritorna <code>[5, 6, 7]</code></li>\n</ul>\n<p>Spazio soluzione</p>\n<pre><code class=\"lang-octave\">function B = rimuovi(A, v)\n  B = A(find(A~=v));\nend\n</code></pre>\n<h2 id=\"funzione-n-2\">Funzione n. 2</h2>\n<p>Si definisca la funzione <code>aggiungi(Q,v)</code> che prende in ingresso una\nmatrice <code>Q</code> ed un valore <code>v</code>, e restituisce una matrice corrispondente a\n<code>Q</code> a cui è stato aggiunto <code>v</code> come primo elemento di ogni riga.</p>\n<p>Esempio:</p>\n<ul>\n<li><code>aggiungi([ 5, 4; 6, 8; 7, 9 ], 3)</code> ritorna\n<code>[ 3, 5, 4; 3, 6, 8; 3, 7, 9 ]</code></li>\n</ul>\n<p>Spazio soluzione</p>\n<pre><code class=\"lang-octave\">function T = aggiungi(Q, e)\n    T = [(ones(rows(Q), 1) .* e) Q];\nend\n</code></pre>\n<h2 id=\"funzione-n-3\">Funzione n. 3</h2>\n<p>Si supponga di avere un array <code>S</code> di <code>n</code> numeri distinti</p>\n<pre><code>S = [5,8,1]\n</code></pre><p>Una <strong>disposizione semplice</strong> di lunghezza <code>k</code> di tale insieme (con <code>k</code>\n≤ <code>n</code>), è rappresentabile da una matrice di k colonne che contiene, in\nogni riga, un sottoinsieme ordinato di k elementi di S.</p>\n<p>Le righe della matrice sono tutte distinte e all’interno di ogni riga\nnon si possono trovare ripetizioni di uno stesso elemento. Due righe\npossono contenere gli stessi elementi purché in ordine differente.</p>\n<p>Ad esempio, una disposizione semplice di <code>S</code> con <code>k=2</code> è la matrice\nseguente[^1]</p>\n<pre><code>[ 5, 8;  5, 1;  8, 5;  8, 1;  1, 5;  1, 8 ]\n</code></pre><p>Il vostro compito e quello di scrivere in Matlab una funzione\n<strong>ricorsiva</strong> <code>disposizioni(S,k)</code> che implementa il calcolo delle\ndisposizioni semplici <code>k</code> di un insieme <code>S</code>, ad esempio</p>\n<pre><code class=\"lang-octave\">octave&gt; disposizioni([5,8,1],2)\n\nans =\n\n    5   8\n    5   1\n    8   5\n    8   1\n    1   5\n    1   8\n</code></pre>\n<h2 id=\"osservazioni-utili-per-l-implementazione\">Osservazioni utili per l&#39;implementazione</h2>\n<p>Per <code>k=1</code>, l&#39;elenco delle disposizioni semplici di <code>S</code> corrisponde ad\n<code>S</code> <em>trasposto</em>; nel nostro esempio</p>\n<pre><code class=\"lang-octave\">octave&gt; disposizioni([5,8,1],1)\n\n    5\n    8\n    1\n</code></pre>\n<p>Quando <code>k&gt;1,</code> le disposizioni si possono calcolare sfruttando le\nfunzioni n. 1 e 2 definite ai punti precedenti nel modo seguente</p>\n<ol>\n<li>si rimuove un elemento <code>v</code> di <code>S</code>,</li>\n<li>si aggiunge <code>v</code> a tutte le disposizioni di <code>k-1</code> elementi di <code>S - v</code>\n(ovvero il vettore <code>S</code> a cui è stato rimosso v).</li>\n</ol>\n<p>la procedura sopra deve essere ripetuta per tutti gli elementi <code>v</code> di <code>S</code></p>\n<p>Nel nostro esempio, per k = 2</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>S</strong></th>\n<th style=\"text-align:center\"><strong>v</strong></th>\n<th style=\"text-align:center\"><strong>S - v</strong></th>\n<th style=\"text-align:center\"><strong>disposizioni(S-v,1)</strong></th>\n<th style=\"text-align:center\"><strong>Disposizioni risultanti</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">[5,8,1]</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">[8, 1]</td>\n<td style=\"text-align:center\">[8; 1]</td>\n<td style=\"text-align:center\">[ 5, 8; 5, 1 ]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[5,8,1]</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">[5, 1]</td>\n<td style=\"text-align:center\">[5; 1]</td>\n<td style=\"text-align:center\">[ 8, 5; 8, 1 ]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[5,8,1]</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">[5, 8]</td>\n<td style=\"text-align:center\">[5; 8]</td>\n<td style=\"text-align:center\">[ 1, 5; 1, 8 ]</td>\n</tr>\n</tbody>\n</table>\n<p>Il risultato finale e&#39; la fusione delle <strong>disposizioni risultanti</strong> in un&#39;unica\nmatrice:</p>\n<pre><code class=\"lang-octave\">[ [5, 8]; [5, 1] ; [8, 5]; [8, 1]; [1, 5]; [1, 8] ]\n</code></pre>\n<p>Spazio soluzione</p>\n<pre><code class=\"lang-octave\">function P = disposizioni(s,k)\n  n = length(s);\n    if k == 1\n      P = s&#39;;\n    else\n        P = [];\n        for x = 1:n\n            e = s(x);\n            t = rimuovi(s, e);\n            Q = disposizioni(t, k-1);\n            T = aggiungi(Q, e);\n            P = [P; T];\n        end\n    end\nend\n</code></pre>\n<p>\\newpage</p>\n<h1 id=\"esercizio-numero-3-c-con-tabelle-verit-\">Esercizio numero 3 --- C con tabelle verità</h1>\n<p>Sia dato il seguente programma:</p>\n<pre><code class=\"lang-c\">if(!a) {\n    if (b) {\n        if((a &amp;&amp; c) || (!b &amp;&amp; !c)) {\n            printf(&quot;Nooo!&quot;);\n        } else {\n            printf(&quot;Yes!&quot;);\n        }\n    }\n}\n</code></pre>\n<p>dove <code>a</code>, <code>b</code> e <code>c</code> sono variabili inizializzate in precedenza ad un\nvalore che può essere 0 oppure 1.</p>\n<h2 id=\"domanda-1\">Domanda 1</h2>\n<p>Si compili la seguente tabella per ogni combinazione dei valori delle\ntre variabili</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>a</strong></th>\n<th style=\"text-align:center\"><strong>b</strong></th>\n<th style=\"text-align:center\"><strong>c</strong></th>\n<th style=\"text-align:center\"><strong>Messaggio stampato</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Yes!</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">Yes!</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"domanda-2\">Domanda 2</h2>\n<p>Si riscriva il frammento di codice utilizzando un solo <code>if</code>, ove la\ncondizione deve essere la più ridotta possibile in termini di operatori\ne variabili utilizzate.</p>\n<pre><code class=\"lang-c\">if(!a &amp;&amp; b) {\n    printf(&quot;Yes!&quot;);\n}\n</code></pre>\n<p>[^1]: Ricordate che in una matrice Matlab/Octave, il punto e virgola\n    separa le righe.</p>\n</div>\n          <script src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_SVG\"></script>\n          <div id=\"disqus_thread\" class=\"post_container__comments\"> \n            <script>(function() {\n  var disqus_shortname, dsq;\n\n  disqus_shortname = 'vittoriozaccaria';\n\n  dsq = document.createElement('script');\n\n  dsq.type = 'text/javascript';\n\n  dsq.async = true;\n\n  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';\n\n  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n\n}).call(this);\n\n            </script><a href=\"http://disqus.com\" class=\"dsq-brlink\">comments powered by <span class=\"logo-disqus\">Disqus</span></a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>",
        "link": "infob/2015/06/30/soluzioni-prova-scritta-del-29-giugno.html"
    },
    "mdContent": "\n\nEsercizio numero 1 - Linguaggio C\n===================================\n\nSi considerino i seguenti tipi di dato in C. Essi servono a contenere le\ninformazioni relative ad una carta di credito, incluse le transazioni\neseguite.\n\n``` c\n#define N 100\ntypedef char Stringa[N];\ntypedef enum {falso, vero} bool;\n\ntypedef struct // descrizione della transazione\n{\n    float importo;\n    Stringa nazione;\n    int timestamp; // tempo dell'acquisto espresso in secondi dal 1/1/1970.\n    // Ad es. le ore 9:00:00 del il 2015.06.29 corrispondono al 1435561200 secondo\n    //        le ore 9:01:00 del il 2015.06.29 corrispondono al 1435561260 secondo\n    bool usato_pin; // determina se la transazione è avvenuta richiedendo il pin all'utente\n} Acquisto;\n\ntypedef struct\n{\n    int card_number; // numero della carta\n    Acquisto trans[N];\n    int n_trans; // numero delle transazioni eseguite\n} Carta;\n```\n\nDomanda 1\n---------\n\nSi definisca un nuovo tipo di struttura `Persona` atta a contenere le\ninformazioni relative al proprietario della carta e si modifichi la\ndefinizione del tipo `Carta` in modo che contenga un campo\n`proprietario` di tipo `Persona`.\n\n``` c\ntypedef struct\n{\n    Stringa nome;\n    Stringa cognome;\n} Persona;\n\ntypedef struct\n{\n    int card_number;      // numero della carta\n    Acquisto trans[N];    // acquisti effettuati con la carta\n    Persona proprietario; // \n    int n_trans;          // numero delle transazioni eseguite\n} Carta;\n```\n\nDomanda 2\n---------\n\nSi scriva un frammento di codice in linguaggio C per rilevare le carte\nche possono aver subito una frode. Una carta può aver subito una frode\nse:\n\na.  riporta due transazioni consecutive in meno di 1 minuto, oppure\nb.  riporta due transazioni consecutive con PIN in nazioni diverse in meno di\n    un'ora.\n\nIn particolare:\n\n1.  Il codice deve contenere una variabile `cards` che memorizzi 1\n    milione di carte di credito\n\n2.  Assumendo che la variabile `cards` sia stata riempita\n    precedentemente:\n\n    -   si stampino i numeri delle carte che possono aver subito una\n        frode. Si tenga presente che le transazioni registrate in\n        `Acquisto trans[N]` sono ordinate cronologicamente.\n\n    -   si copino le informazioni di tutte le persone frodate nell'array\n        `persone_frodate` (senza lasciare buchi)\n\n<!-- -->\n``` c\n#define M 1000000\nint main()\n{\n    Carta cards[M];\n    int i, j, k, frodata;\n    Persona persone_frodate[M];\n    for(i = 0; i < M; i++) {\n        frodata = 0; \n        k = 0;\n        for(j = 0; (j < cards[i].n_trans - 1) && frodata == 0; j++) {\n            if(cards[i].trans[j+1].timestamp - cards[i].trans[j].timestamp < 60) {\n                frodata = 1;\n            }\n            else {\n                if(cards[i].trans[j+1].usato_pin == vero && \n                   cards[i].trans[j].usato_pin == vero &&\n                   cards[i].trans[j+1].timestamp - cards[i].trans[j].timestamp < 60 * 60 &&\n                   strcmp(cards[i].trans[j+1].nazione, cards[i].trans[j].nazione) != 0) {\n                    frodata = 1;\n                }\n            }\n        }\n        if (frodata) {\n            printf(\"\\nla carta %d è stata frodata \", cards[i].card_number);\n            persone_frodate[k] = cards[i].proprietario;\n            k++;\n        }\n    }\n}\n```\n\n\\newpage\n\nEsercizio numero 2 - Matlab\n=============================\n\nSi sviluppino in Matlab le seguenti funzioni:\n\nFunzione n. 1\n-------------\n\nSi definisca la funzione `rimuovi(A,v)` tale che, dato un vettore `A` ed\nun valore `v` in ingresso, ritorni il vettore `A` privato di `v` (se\ncontenuto in esso), altrimenti restituisce `A`.\n\n\n-   `rimuovi([ 5, 6, 7 ], 5)` ritorna `[6, 7]`\n-   `rimuovi([ 5, 6, 7 ], 9)` ritorna `[5, 6, 7]`\n\nSpazio soluzione\n\n``` octave\nfunction B = rimuovi(A, v)\n  B = A(find(A~=v));\nend\n```\n\nFunzione n. 2\n-------------\n\nSi definisca la funzione `aggiungi(Q,v)` che prende in ingresso una\nmatrice `Q` ed un valore `v`, e restituisce una matrice corrispondente a\n`Q` a cui è stato aggiunto `v` come primo elemento di ogni riga.\n\nEsempio:\n\n-   `aggiungi([ 5, 4; 6, 8; 7, 9 ], 3)` ritorna\n    `[ 3, 5, 4; 3, 6, 8; 3, 7, 9 ]`\n\nSpazio soluzione\n\n``` octave\nfunction T = aggiungi(Q, e)\n    T = [(ones(rows(Q), 1) .* e) Q];\nend \n```\n\nFunzione n. 3\n-------------\n\nSi supponga di avere un array `S` di `n` numeri distinti\n\n    S = [5,8,1]\n\nUna **disposizione semplice** di lunghezza `k` di tale insieme (con `k`\n≤ `n`), è rappresentabile da una matrice di k colonne che contiene, in\nogni riga, un sottoinsieme ordinato di k elementi di S.\n\nLe righe della matrice sono tutte distinte e all’interno di ogni riga\nnon si possono trovare ripetizioni di uno stesso elemento. Due righe\npossono contenere gli stessi elementi purché in ordine differente.\n\nAd esempio, una disposizione semplice di `S` con `k=2` è la matrice\nseguente[^1]\n\n    [ 5, 8;  5, 1;  8, 5;  8, 1;  1, 5;  1, 8 ]\n\nIl vostro compito e quello di scrivere in Matlab una funzione\n**ricorsiva** `disposizioni(S,k)` che implementa il calcolo delle\ndisposizioni semplici `k` di un insieme `S`, ad esempio\n\n``` octave\noctave> disposizioni([5,8,1],2)\n\nans =\n\n    5   8\n    5   1\n    8   5\n    8   1\n    1   5\n    1   8\n```\n\nOsservazioni utili per l'implementazione\n----------------------------------------\n\nPer `k=1`, l'elenco delle disposizioni semplici di `S` corrisponde ad\n`S` *trasposto*; nel nostro esempio\n\n``` octave\noctave> disposizioni([5,8,1],1)\n\n    5\n    8\n    1\n```\n\nQuando `k>1,` le disposizioni si possono calcolare sfruttando le\nfunzioni n. 1 e 2 definite ai punti precedenti nel modo seguente\n\n1.  si rimuove un elemento `v` di `S`,\n2.  si aggiunge `v` a tutte le disposizioni di `k-1` elementi di `S - v`\n    (ovvero il vettore `S` a cui è stato rimosso v).\n\nla procedura sopra deve essere ripetuta per tutti gli elementi `v` di `S`\n\nNel nostro esempio, per k = 2\n\n|  **S**  | **v** | **S - v** | **disposizioni(S-v,1)** | **Disposizioni risultanti** |\n|:-------:|:-----:|:---------:|:-----------------------:| :---------------------------:|\n| [5,8,1] |   5   |   [8, 1]  |          [8; 1]         |        [ 5, 8; 5, 1 ]       |\n| [5,8,1] |   8   |   [5, 1]  |          [5; 1]         |         [ 8, 5; 8, 1 ]       |\n| [5,8,1] |   1   |   [5, 8]  |          [5; 8]         |        [ 1, 5; 1, 8 ]       |\n\nIl risultato finale e' la fusione delle **disposizioni risultanti** in un'unica\nmatrice:\n\n``` octave\n[ [5, 8]; [5, 1] ; [8, 5]; [8, 1]; [1, 5]; [1, 8] ]\n```\n\nSpazio soluzione\n\n``` octave\nfunction P = disposizioni(s,k)\n  n = length(s);\n    if k == 1\n      P = s';\n    else\n        P = [];\n        for x = 1:n\n            e = s(x);\n            t = rimuovi(s, e);\n            Q = disposizioni(t, k-1);\n            T = aggiungi(Q, e);\n            P = [P; T];\n        end\n    end\nend\n```\n\n\\newpage\n\nEsercizio numero 3 --- C con tabelle verità\n===========================================\n\nSia dato il seguente programma:\n\n``` c\nif(!a) {\n    if (b) {\n        if((a && c) || (!b && !c)) {\n            printf(\"Nooo!\");\n        } else {\n            printf(\"Yes!\");\n        }\n\t}\n}\n```\n\ndove `a`, `b` e `c` sono variabili inizializzate in precedenza ad un\nvalore che può essere 0 oppure 1.\n\nDomanda 1\n---------\n\nSi compili la seguente tabella per ogni combinazione dei valori delle\ntre variabili\n\n| **a** | **b** | **c** | **Messaggio stampato** |\n|:-----:|:-----:|:-----:|:----------------------:|\n|   0   |   0   |   0   |                        |\n|   0   |   0   |   1   |                        |\n|   0   |   1   |   0   |          Yes!          |\n|   0   |   1   |   1   |          Yes!          |\n|   1   |   0   |   0   |                        |\n|   1   |   0   |   1   |                        |\n|   1   |   1   |   0   |                        |\n|   1   |   1   |   1   |                        |\n\nDomanda 2\n---------\n\nSi riscriva il frammento di codice utilizzando un solo `if`, ove la\ncondizione deve essere la più ridotta possibile in termini di operatori\ne variabili utilizzate.\n\n``` c\nif(!a && b) {\n    printf(\"Yes!\");\n}\n```\n\n[^1]: Ricordate che in una matrice Matlab/Octave, il punto e virgola\n    separa le righe.\n"
}